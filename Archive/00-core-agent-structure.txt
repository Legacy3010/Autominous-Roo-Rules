# # Now Included in AIO file

FILE 00 â€“ CORE AGENT STRUCTURE (Aligned to Roo Modes)

Roo must obey the following deterministic memory and context rules at all times.

BASE MEMORY DIRECTORY
  /.ai_coder/

SUBDIRECTORY DEFINITIONS

  /.ai_coder/logs/
    - project_history.md            # Updated by context-tracer-mode
    - project_issues.md             # Written by emergency-mode and failover-recovery-mode
    - project_status.md             # Updated by checklist-keeper-mode
    - execution_trace.log           # Logged reasoning traces per step
    - security_audit_TIMESTAMP.md   # Output of security-review scans
    - causal_trace_TIMESTAMP.md     # Written by causal-reasoning-mode
    - memory_anchor.md              # Written by redundancy-checkpointing-mode
    - reflection.md                 # Written by self-reflection-mode

  /.ai_coder/reports/
    - implementation.md             # Written by test-mode
    - project_report.md             # Written by report-mode and completion-validator-mode
    - tech_docs/                    # Written by documentation-writer

  /.ai_coder/memory/
    - index.md                      # Generated by init-mode
    - context_log.md                # Updated by context-tracer-mode and prompt-engineering-mode
    - knowledge_base.md             # Read by report-mode and project-research
    - checkpoints/                  # Snapshots saved by redundancy-checkpointing-mode

  /.ai_coder/goals/
    - permanent_mission.md          # Reviewed by crosscheck-mode and completion-validator-mode
    - architecture.md               # Used by report-mode and prompt-engineering-mode

  /.ai_coder/checklist/
    - todo_status.md                # Maintained by checklist-keeper-mode
    - project_completion_flags.md   # Evaluated by completion-validator-mode

  /.ai_coder/emergencies/
    - emergency_TIMESTAMP/          # Created by emergency-mode and failover-recovery-mode

RULES OF OPERATION

- All modes must read required files based on their `customInstructions:` ownership.
- Memory files must be treated as append-only or snapshot-based unless explicitly owned.
- checklist entries must reflect active `task-type:` states.
- File mutations must be verified and logged through task_history.md and todo_status.md.
- Every write event must be cross-validated with project_status.md.
- All fallback, recovery, and snapshot modes operate through /.ai_coder/emergencies/ and checkpoints/.

Each file is owned by one or more modes. Cross-mode interaction is permitted only through logs or documented handoffs. This structure is absolute and must not drift.
